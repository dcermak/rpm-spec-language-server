[["Name", "\nThe Name tag contains the proper name of the package. Names must not\ninclude whitespace and may include a hyphen '-' (unlike version and release\ntags). Names should not include any numeric operators ('<', '>','=') as\nfuture versions of rpm may need to reserve characters other than '-'.\n\n"], ["Version", "\nVersion of the packaged content, typically software.\n\nThe version string consists of alphanumeric characters, which can optionally\nbe segmented with the separators `.`, `_` and `+`, plus `~` and `^` (see below).\n\nTilde (`~`) can be used to force sorting lower than base (1.1\\~201601 < 1.1).\nCaret (`^`) can be used to force sorting higher than base (1.1^201601 > 1.1).\nThese are useful for handling pre- and post-release versions, such as\n1.0\\~rc1 and 2.0^a.\n\n"], ["Release", "\nPackage release, used for distinguishing between different builds\nof the same software version.\n\nSee Version for allowed characters and modifiers.\n\n"], ["Epoch", "\nOptional numerical value which can be used to override normal version-release\nsorting order. It's use should be avoided if at all possible.\n\nNon-existent epoch is exactly equal to zero epoch in all version comparisons.\n\n"], ["License", "\nShort (< 70 characters) summary of the package license. For example:\n```\n\tLicense: GPLv3\n```\n\n"], ["SourceLicense", "\nIf license of the sources differ from the main package the license tag\nof the source package can be set with this. If not given the license\ntag of the source and the main package are the same.\n\n"], ["Group", "\nOptional, short (< 70 characters) group of the package.\n```\n\tGroup: Development/Libraries\n```\n\n"], ["Summary", "\nShort (< 70 characters) summary of the package.  \n```\n\tSummary: Utility for converting mumbles into giggles\n```\n\n"], ["Source", "\nIf license of the sources differ from the main package the license tag\nof the source package can be set with this. If not given the license\ntag of the source and the main package are the same.\n\n"], ["Patch", "\nUsed to declare patches applied on top of sources. All patches declared\nwill be packaged into source rpms.\n\n"], ["Icon", "\nUsed to attach an icon to an rpm package file. Obsolete.\n\n"], ["NoSource", ""], ["NoPatch", "\nFiles ending in .nosrc.rpm are generally source RPM packages whose spec\nfiles have one or more NoSource: or NoPatch: directives in them.  Both\ndirectives use the named source or patch file to build the resulting\nbinary RPM package as usual, but they are not included in the source\nRPM package.\n\nThe original intent of this ability of RPM was to allow proprietary or\nnon-distributable software to be built using RPM, but to keep the\nproprietary or non-distributable parts out of the resulting source RPM\npackage, so that they would not get distributed.\n\nThey also have utility if you are building RPM packages for software\nwhich is archived at a well-known location and does not require that\nyou distribute the source with the binary, for example, for an\norganization's internal use, where storing large quantities of source\nis not as meaningful.\n\nThe end result of all this, though, is that you can't rebuild\n``no-source'' RPM packages using `rpm --rebuild' unless you also have\nthe sources or patches which are not included in the .nosrc.rpm.\n\n"], ["URL", "\nURL supplying further information about the package, typically upstream\nwebsite.\n\n"], ["BugURL", "\nBug reporting URL for the package.\n\n"], ["ModularityLabel", ""], ["DistTag", ""], ["VCS", "\n"], ["Distribution", ""], ["Vendor", ""], ["Packager", "\nOptional package distribution/vendor/maintainer name / contact information.\nRarely used in specs, typically filled in by buildsystem macros.\n\n"], ["BuildRoot", "\nObsolete and unused in rpm >= 4.6.0, but permitted for compatibility\nwith old packages that might still depend on it.\n\nDo not use in new packages.\n\n"], ["AutoReqProv", ""], ["AutoReq", ""], ["AutoProv", "\nControl per-package automatic dependency generation for provides and requires. \nAccepted values are 1/0 or yes/no, default is always \"yes\". Autoreqprov is\nequal to specifying Autoreq and Autoprov separately.\n\n"], ["Requires", "\nCapabilities this package requires to function at all. Besides ensuring\nrequired packages get installed, this is also used to order installs\nand erasures. \n\nAdditional context can be supplied using `Requires(qualifier)` syntax,\naccepted qualifiers are:\n\n* `pre`\n\n  Denotes the dependency must be present in before the package is\n  is installed, and is used a strong ordering hint to break possible\n  dependency loops. A pre-dependency is free to be removed\n  once the install-transaction completes.\n\n  Also relates to `%pre` scriptlet execution.\n\n* `post`\n\n  Denotes the dependency must be present right after the package is\n  is installed, and is used a strong ordering hint to break possible\n  dependency loops. A post-dependnecy is free to be removed\n  once the install-transaction completes.\n\n  Also relates to `%post` scriptlet execution.\n\n* `preun`\n\n  Denotes the dependency must be present in before the package is\n  is removed, and is used a strong ordering hint to break possible\n  dependency loops.\n\n  Also relates to `%preun` scriptlet execution.\n\n* `postun`\n\n  Denotes the dependency must be present right after the package is\n  is removed, and is used a strong ordering hint to break possible\n  dependency loops.\n\n  Also relates to `%postun` scriptlet execution.\n\n* `pretrans`\n\n  Denotes the dependency must be present before the transaction starts,\n  and cannot be satisified by added packages in a transaction. As such,\n  it does not affect transaction ordering. A pretrans-dependency is\n  free to be removed after the install-transaction completes.\n\n  Also relates to `%pretrans` and `%preuntrans` scriptlet execution.\n\n* `posttrans`\n\n  Denotes the dependency must be present at the end of transaction, ie\n  cannot be removed during the transaction. As such, it does not affect\n  transaction ordering. A posttrans-dependency is free to be removed\n  after the the install-transaction completes.\n\n  Also relates to `%posttrans` and `%postuntrans` scriptlet execution.\n\n* `verify`\n\n  Relates to `%verify` scriptlet execution. As `%verify` scriptlet is not\n  executed during install/erase, this does not affect transaction ordering.\n\n* `interp`\n\n  Denotes a scriptlet interpreter dependency, usually added automatically\n  by rpm. Used as a strong ordering hint for breaking dependency loops.\n\n* `meta` (since rpm >= 4.16)\n\n  Denotes a \"meta\" dependency, which must not affect transaction ordering.\n  Typical use-cases would be meta-packages and sub-package cross-dependencies\n  whose purpose is just to ensure the sub-packages stay on common version.\n\nMultiple qualifiers can be supplied separated by comma, as long as\nthey're not semantically contradictory: `meta` qualifier contradicts any\nordered qualifier, eg `meta` and `verify` can be combined, and `pre` and\n`verify` can be combined, but `pre` and `meta` can not.\n\nAs noted above, dependencies qualified as install-time only (`pretrans`,\n`pre`, `post`, `posttrans` or combination of them) can be removed after the\ninstallation transaction completes if there are no other dependencies\nto prevent that. This is a common source of confusion.\n\n"], ["Provides", "\nCapabilities provided by this package.\n\n`name = [epoch:]version-release` is automatically added to all packages.\n\n"], ["Conflicts", "\nCapabilities this package conflicts with, typically packages with\nconflicting paths or otherwise conflicting functionality.\n\n"], ["Obsoletes", "\nPackages obsoleted by this package. Used for replacing and renaming\npackages.\n\n"], ["Recommends", ""], ["Suggests", ""], ["Supplements", ""], ["Enhances", "\n"], ["OrderWithRequires", "\n"], ["Prereq", "\nObsolete, do not use.\n\n"], ["BuildPrereq", "\nObsolete, do not use.\n\n"], ["BuildRequires", "\nCapabilities required to build the package.\n\nBuild dependencies are identical to install dependencies except:\n\n```\n  1) they are prefixed with build (e.g. BuildRequires: rather than Requires:)\n  2) they are resolved before building rather than before installing.\n```\n\nSo, if you were to write a specfile for a package that requires gcc to build,\nyou would add\n```\n\tBuildRequires: gcc\n```\nto your spec file.\n\nIf your package was like dump and could not be built w/o a specific version of\nthe libraries to access an ext2 file system, you could express this as\n```\n\tBuildRequires: e2fsprofs-devel = 1.17-1\n```\n\n"], ["BuildConflicts", "\nCapabilities which conflict, ie cannot be installed during the package\npackage build.\n\nFor example if somelib-devel presence causes the package to fail build,\nyou would add\n```\n\tBuildConflicts: somelib-devel\n```\n\n"], ["ExcludeArch", "\nPackage is not buildable on architectures listed here.\nUsed when software is portable across most architectures except some,\nfor example due to endianess issues.\n\n"], ["ExclusiveArch", "\nPackage is only buildable on architectures listed here.\nFor example, it's probably not possible to build an i386-specific BIOS\nutility on ARM, and even if it was it probably would not make any sense.\n\n"], ["ExcludeOS", "\nPackage is not buildable on specific OSes listed here.\n\n"], ["ExclusiveOS", "\nPackage is only buildable on OSes listed here.\n\n"], ["BuildArch", "\nSpecifies the architecture which the resulting binary package\nwill run on.  Typically this is a CPU architecture like sparc,\ni386. The string 'noarch' is reserved for specifying that the\nresulting binary package is platform independent.  Typical platform\nindependent packages are html, perl, python, java, and ps packages.\n\nAs a special case, `BuildArch: noarch` can be used on sub-package\nlevel to allow eg. documentation of otherwise arch-specific package\nto be shared across multiple architectures.\n\nNote that `BuildArch` causes the spec parsing to recurse from the start,\ncausing any macros before that line to be expanded twice. This can yield\nunexpected results, in particular with `%global`.\n\n"], ["Prefixes", "\nSpecify prefixes this package may be installed into, used to make\npackages relocatable. Very few packages are.\n\n"], ["DocDir", "\nDeclare a non-default documentation directory for the package.\nUsually not needed.\n\n"], ["RemovePathPostfixes", "\nColon separated lists of path postfixes that are removed from the end\nof file names when adding those files to the package. Used on sub-package\nlevel.\n\nUsed for creating sub-packages with conflicting files, such as different\nvariants of the same content (eg minimal and full versions of the same\nsoftware). \n\n"]]
